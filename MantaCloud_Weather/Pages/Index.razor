@page "/"
@using MantaRays_Weather.Enums;
@inject IConfiguration _config
@inject IHttpClientFactory _clientFactory
@inject IForecastAPIService _forecastService
@inject ICookieStorageAccessor _cookieStorage
@using MantaRays_Weather.Components

@if (dailyForecast is null)
{
    <StartPage ErrorString="@errorString"
               IsLoading="@isLoading"
               OnZipCodeEntered="@SetZipCodeHandler">
    </StartPage>
}
else
{
    <InputHeader ErrorString="@errorString"
                 IsLoading="@isLoading"
                 ZipCode="@zipCode"
                 OnZipCodeEntered="@SetZipCodeHandler">
    </InputHeader>

    <Current Forecast="currentForecast"
             ErrorString="@errorString"
             City="@city"
             HighTemp="@dayHigh"
             LowTemp="@dayLow">
    </Current>

    <div class="waveTabs">
        <button @onclick="() => SetSelectedTab(Tabs.Daily)"
                class="tab-button @(SelectedTab == Tabs.Daily ? "active" : string.Empty)">
            Daily
        </button>
        <button @onclick="() => SetSelectedTab(Tabs.Hourly)"
                class="tab-button @(SelectedTab == Tabs.Hourly ? "active" : string.Empty)">
            Hourly
        </button>
    </div>
    <div class="forecastWrapper">

        @if (SelectedTab == Tabs.Hourly)
        {
            <Hourly Forecast="hourlyForecast" ErrorString="errorString" />
        }
        else if (SelectedTab == Tabs.Daily)
        {
            <Daily Forecast="dailyForecast" ErrorString="errorString" City="@city" />
        }
    </div>
}


@code {
    private CurrentForecast? currentForecast;
    private DailyForecast? dailyForecast;
    private HourlyForecast? hourlyForecast;
    private enum Tabs { Today, Hourly, Daily };
    private Tabs SelectedTab { get; set; } = Tabs.Daily;

    private int? zipCode = null;
    private int dayHigh = 0;
    private int dayLow = 0;
    private string city = "";
    private string errorString = "";
    private bool isLoading = false;
    private bool startAnimation = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var savedZip = await _cookieStorage.GetValueAsync<string>("zipCode");
            if (!string.IsNullOrWhiteSpace(savedZip))
            {
                int.TryParse(savedZip, out int returnZip);
                zipCode = returnZip;
                await FetchWeatherForecast(savedZip);
                StateHasChanged();
            }
        }

    }
    //refactor this to cache the data.  Combind the two calls into one that returns a single model with both current, daily and hourly forecasts.
    private async Task FetchWeatherForecast(string zip)
    {
        if (zip.Length != 5)
        {
            errorString = "Please enter a valid 5 digit zip code.";
            return;
        }
        isLoading = true;
        var combinedResult = await _forecastService.GetForecastByZip(zip);
        if (!combinedResult.IsSuccess || combinedResult.Data == null)
        {
            errorString = combinedResult.ErrorMessage ?? "Failed to fetch Weather Forecast.";
            return;
        }
        //Check this may only return the first word in the city name so New York would be New
        city = string.IsNullOrEmpty(combinedResult.City) ? "" : combinedResult.City.Split(',')[0].Trim();

        currentForecast = combinedResult.Data.Current;
        dailyForecast = combinedResult.Data.Daily;
        hourlyForecast = combinedResult.Data.Hourly;
        //CurrentForecast for some reason is in Celsius.  Convert to Fahrenheit
        currentForecast.properties.temperature.value = CelsiusToFahrenheit(currentForecast.properties.temperature.value);
        currentForecast.properties.windSpeed.value = KphToMph(currentForecast.properties.windSpeed.value);
        currentForecast.properties.windDirection.direction = ConvertDegreesToCompass(currentForecast.properties.windDirection.value);
        dayHigh = dailyForecast?.Properties.Periods.OrderBy(x => x.Number).FirstOrDefault(x => x.IsDaytime)?.Temperature ?? 0;
        dayLow = dailyForecast?.Properties.Periods.OrderBy(x => x.Number).FirstOrDefault(x => !x.IsDaytime)?.Temperature ?? 0;
        isLoading = false;

        errorString = "";
    }

    private void Clear()
    {
        dailyForecast = null;
        errorString = "";
    }

    private static int CelsiusToFahrenheit(float celsius)
    {
        return (int)Math.Round(celsius * 1.8 + 32);
    }

    private static float KphToMph(float kph)
    {
        return kph * 0.621371f;
    }

    private void SetSelectedTab(Tabs tab)
    {
        SelectedTab = tab;
    }

    private static string ConvertDegreesToCompass(int degrees)
    {
        string[] compassPoints = { "N", "NE", "E", "SE", "S", "SW", "W", "NW" };
        int compassIndex = (int)Math.Round((degrees % 360) / 45.0);

        // Ensure the index is within the array bounds
        compassIndex = compassIndex % compassPoints.Length;

        return compassPoints[compassIndex];
    }


    private string GetDateSuffix(int day)
    {
        switch (day)
        {
            case 1:
            case 21:
            case 31:
                return "st";
            case 2:
            case 22:
                return "nd";
            case 3:
            case 23:
                return "rd";
            default:
                return "th";
        }
    }

    public async Task SetZipCodeHandler(string zip)
    {
        await _cookieStorage.SetValueAsync("zipCode", zip);
        await FetchWeatherForecast(zip);
    }


}