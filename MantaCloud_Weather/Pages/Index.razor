@page "/"
@using MantaRays_Weather.Enums;
@inject IConfiguration _config
@inject IHttpClientFactory _clientFactory
@inject IForecastAPIService _forecastService
@using MantaRays_Weather.Components
<img id="@(forecast == null ? "titleImage" : "titleImageSm")" src="/img/MantaRaysTitle.svg" alt="Logo Title">
<div class="@(forecast == null ? "inputHeader" : "inputHeaderSm")">
    <InputNumber type="number" placeholder="Enter a ZipCode" @bind-Value="zipCode" autofocus />
    @if(forecast is null)
    {
        <button class="mx-2 btn btn-primary" @onclick="() => FetchWeatherForecast(zipCode.ToString())">Get Forecast</button>

    }
    else
    {
        <button class="mx-2 btn p-0" @onclick="() => FetchWeatherForecast(zipCode.ToString())">
            <i class="bi bi-binoculars-fill" style="color: var(--bs-orange);"></i>
        </button>
        <img src="img/MantaRays_Logo.svg" style="width:10%; height:10%;" alt="MantaRays Logo"/>
    }
    
</div>
@if (forecast is null)
{
        <img id="@(forecast == null ? "logoImage" : "logoImageSm")" src="/img/MantaRays_Logo.svg" alt="Manta Ray Logo">
    @if (!string.IsNullOrEmpty(errorString))
    {
        <p class="alert-danger">@errorString</p>
    }
    @if(isLoading)
    {
        <h3>Loading...</h3>
    }
}
else
{   <div class="currentHeader">
        <div class="d-flex justify-content-between">
            <h2 id="headline">@(city) forecast for @(forecast.Properties.Updated.DayOfWeek) @($"{forecast.Properties.Updated.Date.Day}{GetDateSuffix(forecast.Properties.Updated.Date.Day)}")</h2>
        </div>
        <div class="currentForecast">
        </div>
    </div> 
    <div class="waveTabs">
        <button @onclick="() => SetSelectedTab(Tabs.Daily)"
                class="tab-button @(SelectedTab == Tabs.Daily ? "active" : string.Empty)">
            Daily
        </button>
        <button @onclick="() => SetSelectedTab(Tabs.Hourly)"
                class="tab-button @(SelectedTab == Tabs.Hourly ? "active" : string.Empty)">
            Hourly
        </button>
    </div>
    <div class="forecastWrapper">
        
        @if (SelectedTab == Tabs.Hourly)
        {
            <Hourly Forecast="hourlyForecast" ErrorString="errorString" />
        }
        else if (SelectedTab == Tabs.Daily)
        {
            <Daily Forecast="forecast" ErrorString="errorString" City="@city"/>
        }
    </div>
}


@code {
    private DailyForecast? forecast; 
    private HourlyForecast? hourlyForecast;
    private enum Tabs { Today, Hourly, Daily };
    private Tabs SelectedTab { get; set; } = Tabs.Daily;

    private int? zipCode = null;
    private string city = "";
    private string errorString = "";  
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task FetchWeatherForecast(string zip)
    {
        if (zip.Length != 5)
        {
            errorString = "Please enter a valid 5 digit zip code.";
            return;
        }
        isLoading = true;
        var dayResult = await _forecastService.GetForecastByZip<DailyForecast?>(zip, ForecastType.Daily);

        if (!dayResult.IsSuccess || dayResult.Data == null)
        {
            errorString = dayResult.ErrorMessage ?? "Failed to fetch Weather Forecast.";
            return;
        }
        city = string.IsNullOrEmpty(dayResult.City) ? "" : dayResult.City.Split(',')[0].Trim();

        forecast = dayResult.Data;

        var hourResult = await _forecastService.GetForecastByZip<HourlyForecast?>(zip, ForecastType.Hourly);

        if (!hourResult.IsSuccess || hourResult.Data == null)
        {
            errorString = hourResult.ErrorMessage ?? "Failed to fetch Weather Forecast.";
            return;
        }

        hourlyForecast = hourResult.Data;
        isLoading = false;

        errorString = "";
    }

    private void Clear()
    {
        forecast = null;
        errorString = "";
    }

    private void SetSelectedTab(Tabs tab)
    {
        SelectedTab = tab;
    }

    private string GetDateSuffix(int day)
    {
        switch (day)
        {
            case 1:
            case 21:
            case 31:
                return "st";
            case 2:
            case 22:
                return "nd";
            case 3:
            case 23:
                return "rd";
            default:
                return "th";
        }
    }




}