@page "/weather"
@inject IConfiguration _config
@inject IHttpClientFactory _clientFactory
@inject IForecastAPIService _forecastService

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2"> @errorString</div>
}
else if (forecast is null)
{
    <div class="h4">Loading...</div>
}
else
{
    <div class="wrapper">
        <div class="table-container">
            <h2>Forecast for Week of @forecast.Properties.Updated.ToString("MMMM dd yyyy")</h2>
            <table>
                <thead>
                    <tr>
                        <th><i class="oi oi-plus"></i></th>
                        <th>Forecast</th>
                        <th><i class="bi bi-thermometer-half"></i></th>
                        <th><i class="bi bi-cloud-rain-fill"></i></th>
                        <th><i class="bi bi-wind"></i></th>
                    </tr>
                </thead>
                <tbody>
                    @if (forecast.Properties.Periods is not null)
                    {
                        string lastDay = string.Empty;
                        @foreach (var day in forecast.Properties.Periods)
                        {
                            string currentDay = day.StartTime.ToString("dddd");
                            if (currentDay != lastDay)
                            {
                                <tr>
                                    <td colspan="5" class="h4 bg-black text-white">
                                        <strong>@currentDay</strong>
                                    </td>
                                </tr>
                                lastDay = currentDay;
                            }
                            <tr>
                                <td data-title="When">@day.Name @day.StartTime.ToString("h:mm tt")</td>
                                <td data-title="Forecast">@day.ShortForecast</td>
                                <td data-title="Temp">@($"{day.Temperature}\u00B0{day.TemperatureUnit}")</td>
                                <td data-title="Precipitation">@(day.ProbabilityOfPrecipitation?.Value.HasValue == true ? $"{day.ProbabilityOfPrecipitation.Value}%" : "0%")</td>
                                <td data-title="Wind">@day.WindDirection @day.WindSpeed</td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private GeoLocation geoLocation;
    private OfficeGridPoints gridPoints;
    private WeatherForecast forecast;  // Made this private for consistency
    private string errorString;  // Made this private for consistency

    protected override async Task OnInitializedAsync()
    {
        await FetchWeatherForecast("98052");  // Added await to handle the asynchronous operation
    }

    private async Task FetchWeatherForecast(string zip)
    {
        try
        {
            geoLocation = await _forecastService.GetGeoLocation(zip);
            if (geoLocation == null)
            {
                errorString = "Failed to fetch GeoLocation.";
                return;
            }

            var firstResult = geoLocation.results?.FirstOrDefault();
            if (firstResult == null)
            {
                errorString = "GeoLocation results are empty.";
                return;
            }

            gridPoints = await _forecastService.GetGridPointsAsync(
                firstResult.geometry.Location.Lat.ToString(),
                firstResult.geometry.Location.Lng.ToString()
            );

            if (gridPoints == null)
            {
                errorString = "Failed to fetch Grid Points.";
                return;
            }

            forecast = await _forecastService.GetForecastAsync(gridPoints.ForecastOffice, gridPoints.GridX.ToString(), gridPoints.GridY.ToString());
            if (forecast == null)
            {
                errorString = "Failed to fetch Weather Forecast.";
                return;
            }

            errorString = null;  // Clear any previous errors
        }
        catch (Exception ex)
        {
            errorString = $"There was an error: {ex.Message}";
        }
    }
}