@page "/weather"
@inject IHttpClientFactory _clientFactory

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2"> @errorString</div>
}
else if (forecast is null)
{
    <div class="h4">Loading...</div>
}
else
{
    <div class="wrapper">
        <div class="table-container">
            <h2>Forecast for Week of @forecast.Properties.Updated.ToString("MMMM dd yyyy")</h2>
            <table>
                <thead>
                    <tr>
                        <th><i class="oi oi-plus"></i></th>
                        <th>Forecast</th>
                        <th><i class="bi bi-thermometer-half"></i></th>
                        <th><i class="bi bi-cloud-rain-fill"></i></th>
                        <th><i class="bi bi-wind"></i></th>
                    </tr>
                </thead>
                <tbody>
                    @if (forecast.Properties.Periods is not null)
                    {
                        string lastDay = string.Empty;
                        @foreach (var day in forecast.Properties.Periods)
                        {
                            string currentDay = day.StartTime.ToString("dddd");
                            if (currentDay != lastDay)
                            {
                                <tr>
                                    <td colspan="5" class="h4 bg-black text-white">
                                        <strong>@currentDay</strong>
                                    </td>
                                </tr>
                                lastDay = currentDay;
                            }
                            <tr>
                                <td data-title="When">@day.Name @day.StartTime.ToString("h:mm tt")</td>
                                <td data-title="Forecast">@day.ShortForecast</td>
                                <td data-title="Temp">@day.Temperature @day.TemperatureUnit</td>
                                <td data-title="Precipitation">@(day.ProbabilityOfPrecipitation?.Value.HasValue == true ? $"{day.ProbabilityOfPrecipitation.Value}%" : "0%")</td>
                                <td data-title="Wind">@day.WindDirection @day.WindSpeed</td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
    </div>
}

@code {
    WeatherForecast forecast;
    string errorString;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
                    "https://api.weather.gov/gridpoints/MKX/84,98/forecast");
        //ensures clients are open and closes and takes care of stuff behind the scene.
        var client = _clientFactory.CreateClient();
        client.DefaultRequestHeaders.Add("User-Agent", "(mantarayweather.com, contact@mantarayweather.com)");

        HttpResponseMessage response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            string jsonString = await response.Content.ReadAsStringAsync();
            Console.WriteLine(jsonString);
            forecast = await response.Content.ReadFromJsonAsync<WeatherForecast>();
            errorString = null; //clear out any old errors
        }
        else
        {
            errorString = $"There was an error getting our forecast: {response.ReasonPhrase}";
        }
    }
}
