@inject IConfiguration _config
@inject IHttpClientFactory _clientFactory
@inject IForecastAPIService _forecastService

<div class="forecast-container">
    <div class="forecast-subcontainer">
        @for(int i = currentStartIndex; i < currentStartIndex + 5 && i < Forecast.Properties.Periods.Length; i++)
        {
            <div class="forecast-period">
                <div class="forecast-header">
                    <h5>@ConvertToHourDisplay(Forecast.Properties.Periods[i].StartTime)</h5>
                </div>
                <div class="forecast-image">
                    <img src="@Forecast.Properties.Periods[i].Icon" alt="Weather Icon" />
                </div>
                <div class="forecast-wind">
                    <p>@Forecast.Properties.Periods[i].ShortForecast</p>
                </div>
                <div class="forecast-wind">
                    <i class="bi bi-wind"></i>@($" {Forecast.Properties.Periods[i].WindDirection} {Forecast.Properties.Periods[i].WindSpeed}")
                </div>

                <div class="lowforecast-temp">
                    <img src="img/dewpointIcon.png" alt="dew icon" style="width: 1rem">
                    <strong>@($"{Forecast.Properties.Periods[i].Temperature}\u00B0{Forecast.Properties.Periods[i].TemperatureUnit}")</strong>
                </div>
            </div>
        }
    </div>
</div>
<div class="d-flex justify-content-between">
    <button @onclick="MoveToPreviousPeriods"><i class="oi oi-arrow-left"></i></button>
    <button @onclick="MoveToNextPeriods"><i class="oi oi-arrow-right"></i></button>
</div>
@code {
    [Parameter]
    public HourlyForecast? Forecast { get; set; }
    [Parameter]
    public string? ErrorString { get; set; }

    private int currentStartIndex = 0;

    private void MoveToNextPeriods()
    {
        if (currentStartIndex + 5 < Forecast.Properties.Periods.Length)
        {
            currentStartIndex += 5;
        }
    }

    private void MoveToPreviousPeriods()
    {
        if (currentStartIndex - 5 >= 0)
        {
            currentStartIndex -= 5;
        }
    }

    public string ConvertToHourDisplay(DateTime dateTime)
    {
        int hour = dateTime.Hour % 12;
        hour = hour == 0 ? 12 : hour;  // Convert 0 to 12 for 12:00
        string amPm = dateTime.Hour < 12 ? "am" : "pm";

        return $"{hour}{amPm}";
    }
}
