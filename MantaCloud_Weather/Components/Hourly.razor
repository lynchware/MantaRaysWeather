@inject IConfiguration _config
@inject IHttpClientFactory _clientFactory
@inject IForecastAPIService _forecastService

<div class="forecast-container">
    <div class="forecast-subcontainer">
        @for (int i = 0; i < maxPeriods; i++)
        {
            var hour = Forecast.Properties.Periods[i];
            <div class="forecast-period">
                <div class="forecast-header">
                    <h5>@ConvertToHourDisplay(hour.StartTime)</h5>
                </div>
                <div class="forecast-image">
                    <img src="@hour.Icon" alt="Weather Icon" />
                </div>
                <div class="forecast-info">
                    <p>@hour.ShortForecast</p>
                </div>
                <div class="forecast-wind">
                    <i class="bi bi-wind"></i>@($" {hour.WindDirection} {hour.WindSpeed}")
                </div>
                <div class="forecast-temp">
                    <img src="img/dewpointIcon.png" alt="dew icon" style="width: 1rem">
                    <strong>@($"{hour.Temperature}\u00B0{hour.TemperatureUnit}")</strong>
                </div>
            </div>
        }
    </div>
</div>
@code {
    [Parameter]
    public HourlyForecast? Forecast { get; set; }
    [Parameter]
    public string? ErrorString { get; set; }

    private int maxPeriods = 23;

    public string ConvertToHourDisplay(DateTime dateTime)
    {
        int hour = dateTime.Hour % 12;
        hour = hour == 0 ? 12 : hour;  // Convert 0 to 12 for 12:00
        string amPm = dateTime.Hour < 12 ? "am" : "pm";

        return $"{hour}{amPm}";
    }
}
