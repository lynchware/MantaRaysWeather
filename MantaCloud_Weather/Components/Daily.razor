

@if(Forecast is null)
{
    <p class="alert-danger">@ErrorString</p>
} 
else
{

    <div class="forecast-container">
        <div class="forecast-subcontainer">

            @if(Forecast.Properties.Periods is not null)
            {
                string lastDay = string.Empty;
                @foreach(var day in Forecast.Properties.Periods)
                {
                    string currentDay = day.StartTime.ToString("dddd").Substring(0, 3);                    
                    <div class="forecast-period">
                        <div class="forecast-header">
                            <strong>@(currentDay != lastDay ? currentDay : lastDay + " Night")</strong>
                        </div>
                        <div class="forecast-image">
                            <img src="@day.Icon" alt="@day.ShortForecast" />
                        </div>
                        <div class="@(currentDay != lastDay ? "high" : "low")forecast-temp">
                            <img src="img/dewpointIcon.png" alt="dew icon" style="width: 1rem">
                            <strong>@(currentDay != lastDay ? "High" : "Low") </strong>
                            <span>@($"{day.Temperature}\u00B0{day.TemperatureUnit}")</span>
                        </div>
                    </div>
                    lastDay = currentDay;
                }
            }
        </div>
    </div>

}
@code {
    [Parameter]
    public DailyForecast? Forecast { get; set; }
    [Parameter]
    public string? ErrorString { get; set; }
    [Parameter]
    public string City { get; set; } = "";


    //Method to return current day of pervious day + "Night" for currentDay that is null.
}
